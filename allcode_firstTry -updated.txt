

#ifdef ESP32 
#include <WiFi.h>
#include <AsyncTCP.h>
#else 
#include <ESP8266WiFi.h>
#include <ESPAsyncTCP.h>
#endif
#include <ESPAsyncWebServer.h>


const char* ssid = "Jaibalaji1";
const char* password = "jaibalaji12#";


unsigned long previous_time = 0;
unsigned long delay1 = 20000;  // 20 seconds delay



const char* PARAM_INPUT_1 = "state";
const char* PARAM_INPUT_2 = "state2";


const int relay1 = 18; // D0 Pin of NodeMcu, change it if you are using ESP32
const int switch1 = 4; // D6 Pin of NodeMcu, change it if you are using ESP32
const int relay2 = 5; // D1 Pin of NodeMcu, change it if you are using ESP32
const int switch2 = 14; // D5 Pin of NodeMcu, change it if you are using ESP32

int relay_1_status = LOW; // the current status of relay1
int switch_1_status; // the current status of switch1
int last_switch_1_status = LOW; // Last status of switch1
int relay_2_status = LOW; // the current status of relay2
int switch_2_status; // the current status of switch2
int last_switch_2_status = LOW; // Last status of switch2



unsigned long lastDebounceTime = 0; // the last time the output pin was toggled
unsigned long debounceDelay = 50; // the debounce time; increase if the output flickers


AsyncWebServer server(80);

const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
<title>NodeMCU based Web Server</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
html {font-family: Arial; display: inline-block; text-align: center;}
h2 {font-size: 3.0rem;}
p {font-size: 3.0rem;}
body {max-width: 600px; margin:0px auto; padding-bottom: 25px;}
.switch {position: relative; display: inline-block; width: 120px; height: 68px}
.switch input {display: none}
.slider {position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: #F63E36; border-radius: 34px}
.slider:before {position: absolute; content: ""; height: 52px; width: 52px; left: 8px; bottom: 8px; background-color: #fff; -webkit-transition: .4s; transition: .4s; border-radius: 68px}
input:checked+.slider {background-color: #3CC33C}
input:checked+.slider:before {-webkit-transform: translateX(52px); -ms-transform: translateX(52px); transform: translateX(52px)}
</style>
</head>
<body>
<h2>NodeMCU based Web Server</h2>
%BUTTONPLACEHOLDER%
%BUTTONPLACEHOLDER2%
<script>
function toggleCheckbox(element)
{
var xhr = new XMLHttpRequest();
if(element.checked)
{
xhr.open("GET", "/update?state=1", true);
}
else
{
xhr.open("GET", "/update?state=0", true);
}
xhr.send();
}

function toggleCheckbox2(element)
{
var xhr2 = new XMLHttpRequest();
if(element.checked)
{
xhr2.open("GET", "/update?state2=1", true);
}
else
{
xhr2.open("GET", "/update?state2=0", true);
}
xhr2.send();
}

setInterval(function ( )
{
var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function()
{
if (this.readyState == 4 && this.status == 200)
{
var inputChecked;
var outputStateM;

if( this.responseText == 1)
{
inputChecked = true;
outputStateM = "ON";
}
else
{
inputChecked = false;
outputStateM = "OFF";
}
document.getElementById("output").checked = inputChecked;
document.getElementById("outputState").innerHTML = outputStateM;
}
}
xhttp.open("GET", "/state", true);
xhttp.send();

var xhttp2 = new XMLHttpRequest();
xhttp2.onreadystatechange = function()
{
if (this.readyState == 4 && this.status == 200)
{
var inputChecked2;
var outputStateM2;

if( this.responseText == 1)
{
inputChecked2 = true;
outputStateM2 = "ON";
}
else
{
inputChecked2 = false;
outputStateM2 = "OFF";
}
document.getElementById("output2").checked = inputChecked2;
document.getElementById("outputState2").innerHTML = outputStateM2;
}
};
xhttp2.open("GET", "/state2", true);
xhttp2.send();

}, 1000 ) ;
</script>
</body>
</html>
)rawliteral";

// Replaces placeholder with button section in your web page
String processor(const String& var)
{
//Serial.println(var);
if(var == "BUTTONPLACEHOLDER")
{
String buttons1 ="";
String outputStateValue = outputState();
buttons1+= "<h4>Device 1 - Status <span id=\"outputState\"><span></h4><label class=\"switch\"><input type=\"checkbox\" onchange=\"toggleCheckbox(this)\" id=\"output\" " + outputStateValue + "><span class=\"slider\"></span></label>";
return buttons1;
}
          
          if(var == "BUTTONPLACEHOLDER2")
          {
          String buttons2 ="";
          String outputStateValue2 = outputState2();
          buttons2+= "<h4>Device 2 - Status <span id=\"outputState2\"><span></h4><label class=\"switch\"><input type=\"checkbox\" onchange=\"toggleCheckbox2(this)\" id=\"output2\" " + outputStateValue2 + "><span class=\"slider\"></span></label>";
          return buttons2;
          }
          return String();
          }
          
          String outputState()
          {
          if(digitalRead(relay1))
          {
          return "checked";
          }
          else
          {
          return "";
          }
          return "";
          }
          String outputState2()
          {
          if(digitalRead(relay2))
          {
          return "checked";
          }
          else
          {
          return "";
          }
          return "";
          }


 void initWiFi() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WIFI network");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(1000);
  }
  Serial.println(WiFi.localIP());
}

        
        void setup()
        {
        // Serial port for debugging purposes
        Serial.begin(115200);
        
        pinMode(relay1, OUTPUT);
        digitalWrite(relay1, LOW);
        pinMode(switch1, INPUT);
        
        pinMode(relay2, OUTPUT);
        digitalWrite(relay2, LOW);
        pinMode(switch2, INPUT);
         /*
        // Connect to Wi-Fi
        WiFi.begin(ssid, password);
        while (WiFi.status() != WL_CONNECTED)
        {
        delay(1000);
        Serial.println("Connecting to WiFi..");
        }
        
        // Print ESP Local IP Address
        Serial.println(WiFi.localIP());
         */
        
        
        // Connect to Wi-Fi
          WiFi.begin(ssid, password);
          while (WiFi.status() != WL_CONNECTED) {
            delay(1000);
            Serial.println("Connecting to WiFi..");
          }
        
          // Print ESP Local IP Address
          Serial.println(WiFi.localIP());
          initWiFi();
        
        // Route for root / web page
        server.on("/", HTTP_GET, [](AsyncWebServerRequest *request)
        {
        request->send_P(200, "text/html", index_html, processor);
        });
        
        // Send a GET request
        server.on("/update", HTTP_GET, [] (AsyncWebServerRequest *request)
        {
        String inputMessage;
        String inputParam;
        
        // GET input1 value on <ESP_IP>/update?state=<inputMessage>
        if (request->hasParam(PARAM_INPUT_1))
        {
        inputMessage = request->getParam(PARAM_INPUT_1)->value();
        inputParam = PARAM_INPUT_1;
        digitalWrite(relay1, inputMessage.toInt());
        relay_1_status = !relay_1_status;
        }
        else
        {
        inputMessage = "No message sent";
        inputParam = "none";
        }
        Serial.println(inputMessage);
        request->send(200, "text/plain", "OK");
        
        String inputMessage2;
        String inputParam2;
        
        if (request->hasParam(PARAM_INPUT_2))
        {
        inputMessage2 = request->getParam(PARAM_INPUT_2)->value();
        inputParam2 = PARAM_INPUT_2;
        digitalWrite(relay2, inputMessage2.toInt());
        relay_2_status = !relay_2_status;
        }
        else
        {
        inputMessage2 = "No message sent";
        inputParam2 = "none";
        }
        Serial.println(inputMessage2);
        request->send(200, "text/plain", "OK");
        });
        
        // Send a GET request to <ESP_IP>/state
        server.on("/state", HTTP_GET, [] (AsyncWebServerRequest *request)
        {
        request->send(200, "text/plain", String(digitalRead(relay1)).c_str());
        });
        
        server.on("/state2", HTTP_GET, [] (AsyncWebServerRequest *request)
        {
        request->send(200, "text/plain", String(digitalRead(relay2)).c_str());
        });
        // Start server
        server.begin();
        }

void loop()
{

unsigned long current_time = millis(); // number of milliseconds since the upload

  // checking for WIFI connection

  if ((WiFi.status() !=WL_CONNECTED) && (current_time - previous_time >= delay1))
  {
    Serial.print(millis());
    Serial.println("Reconnecting to WIFI network");
    WiFi.disconnect();
    WiFi.reconnect();
    previous_time = current_time;
  }


  
int reading1 = digitalRead(switch1);
if (reading1 != last_switch_1_status)
{
lastDebounceTime = millis(); // reset the debouncing timer
}

if ((millis() - lastDebounceTime) > debounceDelay) 
{ 
if (reading1 != switch_1_status)
{
switch_1_status = reading1;
if (switch_1_status == HIGH)
{
relay_1_status = !relay_1_status;
}
}
}

int reading2 = digitalRead(switch2);
if (reading2 != last_switch_2_status)
{
lastDebounceTime = millis();
}

if ((millis() - lastDebounceTime) > debounceDelay)
{
if (reading2 != switch_2_status)
{
switch_2_status = reading2;
if (switch_2_status == HIGH)
{
relay_2_status = !relay_2_status;
}
}
}
// set the LED:
digitalWrite(relay1, relay_1_status);
digitalWrite(relay2, relay_2_status);

// save the reading. Next time through the loop, it'll be the lastButtonState:
last_switch_1_status = reading1;
last_switch_2_status = reading2;
}



Momntory Buttons:

/*********
  Rui Santos
  Complete project details at https://RandomNerdTutorials.com/esp32-esp8266-web-server-outputs-momentary-switch/

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files.

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.
*********/

#ifdef ESP32
#include <WiFi.h>
#include <AsyncTCP.h>
#else
#include <ESP8266WiFi.h>
#include <ESPAsyncTCP.h>
#endif
#include <ESPAsyncWebServer.h>

// REPLACE WITH YOUR NETWORK CREDENTIALS
const char* ssid = "Jaibalaji";
const char* password = "jaibalaji12#";

const int output1 = 18;
int output2 = 19;
int flag=0;



const int buttonPin = 4;
 int buttonState = 0;

// HTML web page
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
  <head>
    <title>Project Pune Server</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
      body { font-family: Arial; text-align: center; margin:0px auto; padding-top: 30px;}
      .button {
        padding: 10px 20px;
        font-size: 24px;
        text-align: center;
        outline: none;
        color: #fff;
        background-color: #2f4468;
        border: none;
        border-radius: 5px;
        box-shadow: 0 6px #999;
        cursor: pointer;
        -webkit-touch-callout: none;
        -webkit-user-select: none;
        -khtml-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        -webkit-tap-highlight-color: rgba(0,0,0,0);
      }  
      .button:hover {background-color: #1f2e45}
      .button:active {
        background-color: #1f2e45;
        box-shadow: 0 4px #666;
        transform: translateY(2px);
      }



      .button1 {
        padding: 10px 20px;
        font-size: 24px;
        text-align: center;
        outline: none;
        color: #fff;
        background-color: #2f4468;
        border: none;
        border-radius: 5px;
        box-shadow: 0 6px #999;
        cursor: pointer;
        -webkit-touch-callout: none;
        -webkit-user-select: none;
        -khtml-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        -webkit-tap-highlight-color: rgba(0,0,0,0);
      }  
      .button1:hover {background-color: #1f2e45}
      .button1:active {
        background-color: #1f2e45;
        box-shadow: 0 4px #666;
        transform: translateY(2px);
      }
    </style>
  </head>
  <body>
    <h1>Momentory Button </h1>
    <button class="button" onmousedown="toggleCheckbox('on');" 
    ontouchstart="toggleCheckbox('on');" onmouseup="toggleCheckbox('off');"
    ontouchend="toggleCheckbox('off');">Motor1</button> </br></br></br>
    
    <button class="button1" onmousedown="toggleCheckbox1('on1');" 
    ontouchstart="toggleCheckbox1('on1');" onmouseup="toggleCheckbox1('off1');" 
    ontouchend="toggleCheckbox1('off1');">Motor2</button>
    
   <script>
   function toggleCheckbox(x) {
     var xhr = new XMLHttpRequest();
     xhr.open("GET", "/" + x, true);
     xhr.send();
   }
</script>

  <script>
   function toggleCheckbox1(y) {
     var xhr1 = new XMLHttpRequest();
     xhr1.open("GET", "/" + y, true);
     xhr1.send();
   }
  </script>
  
  </body>
</html>)rawliteral";

void notFound(AsyncWebServerRequest *request) {
  request->send(404, "text/plain", "Not found");
}

AsyncWebServer server(80);

void setup() {
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  if (WiFi.waitForConnectResult() != WL_CONNECTED) {
    Serial.println("WiFi Failed!");
    return;
  }
  Serial.println();
  Serial.print("ESP IP Address: http://");
  Serial.println(WiFi.localIP());

  pinMode(output1, OUTPUT);
  digitalWrite(output1, HIGH);
  
  pinMode(output2, OUTPUT);
  digitalWrite(output2, LOW);
  pinMode(buttonPin, INPUT);


  //output3 = output2;

  // Send web page to client
  server.on("/", HTTP_GET, [](AsyncWebServerRequest * request) {
    request->send_P(200, "text/html", index_html);
  });

  // Receive an HTTP GET request
  server.on("/on", HTTP_GET, [] (AsyncWebServerRequest * request) {
    digitalWrite(output1, LOW);
    //delay(20);
   // buttonPin = HIGH;
    request->send(200, "text/plain", "ok");
  });

  // Receive an HTTP GET request
  server.on("/off", HTTP_GET, [] (AsyncWebServerRequest * request) {
    digitalWrite(output1, HIGH);
     //delay(20);
    //buttonPin = LOW;
    request->send(200, "text/plain", "ok");
  });


  // Receive an HTTP GET request
  server.on("/on1", HTTP_GET, [] (AsyncWebServerRequest * request) {
    digitalWrite(output2, HIGH);
    request->send(200, "text/plain", "ok");
  });

  // Receive an HTTP GET request
  server.on("/off1", HTTP_GET, [] (AsyncWebServerRequest * request) {
    digitalWrite(output2, LOW);
    request->send(200, "text/plain", "ok");
  });


  server.onNotFound(notFound);
  server.begin();
}



void loop() {

  buttonState = digitalRead(buttonPin);

  if (buttonState == HIGH && flag == 0)
  {
 digitalWrite(output1, LOW);
 flag=1;
  }
  if (buttonState == LOW && flag == 1) {
 digitalWrite(output1, HIGH);
 flag=0;
 

  }

}




















